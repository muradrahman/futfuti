{"version":3,"sources":["app/recipes.module.css","app/Recipie.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipie","title","calories","image","ingredients","className","style","recipes","src","alt","map","item","text","App","useState","recipies","setRecipies","search","setSearch","query","setQuery","useEffect","getRecipies","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","key","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,2B,wMCkBbC,EAjBC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACzC,OACE,yBAAKC,UAAWC,IAAMC,SAChB,4BAAKN,EAAL,KACD,yBAAKO,IAAKL,EAAOM,IAAI,KAExB,4BACGL,EAAYM,KAAI,SAACC,GAAD,OACf,4BAAKA,EAAKC,UAGd,yCAAeV,EAAf,OCiESW,G,MAxEH,WACV,IADgB,EAOgBC,mBAAS,IAPzB,mBAOTC,EAPS,KAOCC,EAPD,OAQYF,mBAAS,IARrB,mBAQTG,EARS,KAQDC,EARC,OASUJ,mBAAS,WATnB,mBASTK,EATS,KASFC,EATE,KAWhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAW,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OACSL,EADT,mBAff,WAee,oBAdd,qCAaI,cACZM,EADY,gBAKCA,EAASC,OALV,OAKZC,EALY,OAMlBX,EAAYW,EAAKC,MACjBC,QAAQC,IAAIH,EAAKC,MAPC,2CAAH,qDAmBjB,OACE,yBAAKvB,UAAU,OACb,0BAAM0B,SAPQ,SAACC,GACjBA,EAAEC,iBACFb,EAASH,IAKoBZ,UAAU,eACnC,2BACEA,UAAU,aACV6B,KAAK,OACLC,MAAOlB,EACPmB,SAhBa,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,QAgBbG,YAAY,gBAEd,4BAAQjC,UAAU,gBAAgB6B,KAAK,UAAvC,kBAIF,yBAAK7B,UAAU,WACZU,EAASL,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CACE4B,IAAK5B,EAAK6B,OAAOtC,SACjBD,MAAOU,EAAK6B,OAAOC,MACnBvC,SAAUS,EAAK6B,OAAOtC,SACtBC,MAAOQ,EAAK6B,OAAOrC,MACnBC,YAAaO,EAAK6B,OAAOpC,qBCjDjBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.6e109c5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipes\":\"recipes_recipes___6psC\"};","import React from \"react\";\r\nimport style from \"./recipes.module.css\";\r\nconst Recipie = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className={style.recipes}>\r\n          <h1>{title} </h1>\r\n         <img src={image} alt=\"\" />\r\n    \r\n      <ol>\r\n        {ingredients.map((item) => (\r\n          <li>{item.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>Calories : {calories} </p>\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipie;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Recipie from \"./Recipie\";\r\n// import logo from '../logo.svg'\r\n\r\nimport \"../App.css\";\r\n\r\nconst App = () => {\r\n  const API_ID = \"cce9de51\";\r\n  const API_KEY = \"d41c8415697335459974b582339612f6\";\r\n  // const requestHTTP = ;\r\n\r\n  // const [count, setCount] = useState(0);\r\n\r\n  const [recipies, setRecipies] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState(\"chicken\");\r\n\r\n  useEffect(() => {\r\n    getRecipies();\r\n  }, [query]);\r\n\r\n  const getRecipies = async () => {\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`\r\n    );\r\n\r\n    const data = await response.json();\r\n    setRecipies(data.hits);\r\n    console.log(data.hits);\r\n  };\r\n\r\n  const updateChange = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={getSearch} className=\"search-form\">\r\n        <input\r\n          className=\"search-bar\"\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={updateChange}\r\n          placeholder=\"Search Food\"\r\n        />\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Search Button\r\n        </button>\r\n      </form>\r\n      <div className=\"recipes\">\r\n        {recipies.map((item) => (\r\n          <Recipie\r\n            key={item.recipe.calories}\r\n            title={item.recipe.label}\r\n            calories={item.recipe.calories}\r\n            image={item.recipe.image}\r\n            ingredients={item.recipe.ingredients}\r\n          />\r\n        ))}\r\n      </div>\r\n      {/* <h1 onClick={() => setCount(count + 1)}>{count}</h1> */}\r\n    </div>\r\n  );\r\n};\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//      <h1>Hello World</h1>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}